classdef Agent < AgentTaskShare
%     Agent Class
%     
%     An abstract class which agent's interfacing with the framework must extend.
%     Properties inherited by the agent class provide the framework with
%     the number of variables to be recorded and define the interface between agent
%     and task. 
%     
%     In addition to overloading the provided abstract function prototypes, your 
%     extending class must provide a constructor of the form subAgent(samplingRate, stimulusCount, actionCount, recordList, paramStruct)
%	  paramStruct is a structure whose (field name, value) pairs match
%	  variables within the agent to be configured by the contructor. The
%	  subAgent constructor should call the super constructor
%	  Agent(samplingRate, stimulousCount, actionCount) in order to verify
%	  samplingRate, stimulousCount, and actionCount.
%
%     recordList is a cell array in which each element contains the string literal of the variable name to be recored by the framework
%     throughout the course of the simulation 
%
%     Variables intended to be recorded by the framework must be public in
%     scope. Variables will be recorded at the end of each time step

%     For each timestep the process method is called using stimulus and
%     reward signals generated by the task to simulate the agent for one
%     time step. The consequent action generated by the agent will in turn
%     be forwarded to the environment
    
%**************************************************************************
%PROPERTIES TO BE SET BY THE CHILD AGENT CLASS
%**************************************************************************
    properties (GetAccess = public, SetAccess = protected)
        %SEE ADDITIONAL PROPERTIES IN AgentTaskShare
    end

%**************************************************************************
%SUPER CONSTRUCTOR
%**************************************************************************
    methods
%       Agent constructor designed to validate common paramaters.

%       INPUT
%       samplingRate    The refresh rate frequency at which the simulation
%                       is being recorded.
%
%       stimulusCount   The length of the stimulus vector expected by
%                       process
%
%       actionCount     The length of the action vector expected to be
%                       returned by process
%
%       OUTPUT
%       AG              An initialized Agent object.
        function AG = Agent(samplingRate, stimulusCount, actionCount)
            AG@AgentTaskShare(samplingRate, stimulusCount, actionCount);
        end
    end
    
%**************************************************************************
%METHODS TO BE DEFINED BY CHILD AGENT CLASS
%**************************************************************************
    methods (Abstract)
%       An abstract function which computes one agent time step. This must be overloaded
%       in your extending class.
%     
%       INPUT
%       AG:         a reference to the initialized agent object
%     
%       stimulus:   a list of length numStimulus defining the stimulus recieved by
%                 by agent from the task.
%     
%       reward:     a list of length numReward defining the reward provided to the
%                   agent from the task at the given time step.
%
%       OUTPUT
%       action:     a list of length numAction defining the agent's actions to be passed
%                 to the task.

        action = process(AG, stimulus, reward) 
       

%       an abstract functions which resets the internal state of the agent to an encoded
%       base state. This must be overloaded in your extending class
%     
%       INPUT
%       AG:     a reference to the initialized agent object
        reset(AG)
    end
    
%**************************************************************************
%METHODS AND PROPERTIES USED BY THE FRAMEWORK. IGNORE
%**************************************************************************
    methods
%       A method which checks to make sure the input stimulus is of
%       expected length. 
%
%       INPUT
%       AG          An initialized agent object
%       stimulus    The stimulus vector to administer to the agent
%       reward      The reward to give to administer to the agent
%
%       OUTPUT
%       action      The action vector generated by the agent
        action = validProcess(AG, stimulus, reward)
        
    end
end

